def artifactVersion = '2.6.2.cuba23'
if (rootProject.hasProperty('buildVersion')) {
    artifactVersion = rootProject['buildVersion']
}

group = 'com.haulmont.thirdparty'
version = artifactVersion

def repositoryUrl = 'http://repository.haulmont.com:8587/nexus/content'
def repositoryUser = System.getenv('HAULMONT_REPOSITORY_USER')
def repositoryPassword = System.getenv('HAULMONT_REPOSITORY_PASSWORD')

def uploadUrl = project.hasProperty('uploadUrl') ? project.uploadUrl : "${repositoryUrl}/repositories/thirdparty"
def uploadUser = project.hasProperty('uploadUser') ? project.uploadUser : repositoryUser
def uploadPassword = project.hasProperty('uploadPassword') ? project.uploadPassword : repositoryPassword

repositories {
    mavenLocal()
    maven {
        credentials {
            username repositoryUser
            password repositoryPassword
        }
        url "${repositoryUrl}/groups/work"
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

configurations {
    junitAnt
	junitTasksAnt
	jdbcDriver
	deployerJars
}

dependencies {
	deployerJars 'org.apache.maven.wagon:wagon-http:1.0-beta-2'
    junitAnt ('junit:junit:4.12') {
		transitive = false;
	}
    junitTasksAnt('org.apache.ant:ant-junit:1.9.3') {
        transitive = false;
    }
	jdbcDriver('mysql:mysql-connector-java:5.1.39') {
		transitive = false;
	}
}

ant.properties['junit.lib'] = configurations.junitAnt.asPath
ant.properties['jdbc.driver.jar'] = configurations.jdbcDriver.asPath
ant.properties['db.driver'] = 'com.mysql.jdbc.Driver'
ant.properties['db.url'] = 'jdbc:mysql://localhost/eclipselink?useSSL=false'
ant.properties['db.user'] = 'root'
ant.properties['db.pwd'] = 'root'

ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
             classpath: configurations.junitTasksAnt.asPath)
ant.taskdef(name: 'junitreport', classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
             classpath: configurations.junitTasksAnt.asPath)			 

ant.importBuild('antbuild.xml') { antTargetName ->
    'ant-' + antTargetName
}

task unpackManifest(type: Copy, dependsOn: 'ant-package-src-jar') {
    from zipTree('eclipselink-src.zip')
    into 'build/tmp/manifest'
    include 'META-INF/MANIFEST.MF'
}

task buildSourceJar(type: Jar, dependsOn: unpackManifest) {
    from zipTree('eclipselink-src.zip')
    destinationDir = file('build/libs')
    baseName = 'eclipselink'    
    classifier = 'sources'
    manifest {
        from 'build/tmp/manifest/META-INF/MANIFEST.MF'
    }
}

task buildJar(type: Jar, dependsOn: unpackManifest) {
    from zipTree('eclipselink.jar')
    destinationDir = file('build/libs')
    baseName = 'eclipselink'    
    manifest {
        from 'build/tmp/manifest/META-INF/MANIFEST.MF'
    }
}

artifacts {
    archives buildJar 
    archives buildSourceJar
}

uploadArchives.configure {
    repositories.mavenDeployer {
        name = 'httpDeployer'
        configuration = configurations.deployerJars
        repository(url: uploadUrl) {
            authentication(userName: uploadUser, password: uploadPassword)
        }
    }
}

// install to the local Maven repo
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact buildJar 
            
            artifact buildSourceJar {
                classifier "sources"
            }
        }
    }
}
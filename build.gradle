def artifactVersion = '2.7.9-1-jmix'
def originalVersion = '2.7.9'
if (rootProject.hasProperty('buildVersion')) {
    artifactVersion = rootProject['buildVersion']
}
if (rootProject.hasProperty('originalVersion')) {
    originalVersion = rootProject['originalVersion']
}

group = 'org.eclipse.persistence'
version = artifactVersion

def repositoryUrl = 'http://repository.haulmont.com:8587/nexus/content'
def repositoryUser = System.getenv('HAULMONT_REPOSITORY_USER')
def repositoryPassword = System.getenv('HAULMONT_REPOSITORY_PASSWORD')

def uploadUrl = project.hasProperty('uploadUrl') ? project.uploadUrl : "${repositoryUrl}/repositories/thirdparty"
def uploadUser = project.hasProperty('uploadUser') ? project.uploadUser : repositoryUser
def uploadPassword = project.hasProperty('uploadPassword') ? project.uploadPassword : repositoryPassword

repositories {
    mavenLocal()
    jcenter()
    maven {
        credentials {
            username repositoryUser
            password repositoryPassword
        }
        url "${repositoryUrl}/groups/work"
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

configurations {
    junitAnt
    junitTasksAnt
    jdbcDriver
    deployerJars
}

dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-http:1.0-beta-2'
    junitAnt('junit:junit:4.12') {
        transitive = false;
    }
    junitTasksAnt('org.apache.ant:ant-junit:1.9.3') {
        transitive = false;
    }
    jdbcDriver('mysql:mysql-connector-java:5.1.39') {
        transitive = false;
    }
}

task setupEclipseSDK(type:Exec){
    commandLine'wget', '--directory-prefix=plugins/eclipse_sdk',
            '-nc','https://download.eclipse.org/eclipse/downloads/drops4/R-4.10-201812060815/eclipse-SDK-4.10-linux-gtk-x86_64.tar.gz'
    doLast{
        copy {
            from tarTree(resources.gzip('plugins/eclipse_sdk/eclipse-SDK-4.10-linux-gtk-x86_64.tar.gz'))
            into 'plugins/eclipse_sdk'
        }
    }
 }

def currentPath=projectDir.absolutePath.startsWith("file:/")?
        projectDir.absolutePath.substring("file:/".length())
        :projectDir.absolutePath

ant.properties['junit.lib'] = configurations.junitAnt.asPath
ant.properties['jdbc.driver.jar'] = configurations.jdbcDriver.asPath
ant.properties['db.driver'] = 'com.mysql.jdbc.Driver'
ant.properties['db.url'] = 'jdbc:mysql://localhost/eclipselink?useSSL=false'
ant.properties['db.user'] = 'root'
ant.properties['db.pwd'] = 'root'
ant.properties['eclipse.install.dir'] = "$currentPath/plugins/eclipse_sdk/eclipse"
ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
        classpath: configurations.junitTasksAnt.asPath)
ant.taskdef(name: 'junitreport', classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.junitTasksAnt.asPath)

ant.importBuild('antbuild.xml') { antTargetName ->
    'ant-' + antTargetName
}

// install to the local Maven repo
publishing {
    publications {
        core(MavenPublication) {
            artifact file("plugins/org.eclipse.persistence.core_${artifactVersion}.jar")
            artifactId 'org.eclipse.persistence.core'
            artifact source: file("plugins/org.eclipse.persistence.core.source_${artifactVersion}.jar"), classifier: 'sources'
            pom.withXml {
                asNode().appendNode('packaging', 'jar')
                def dependencies = asNode().appendNode('dependencies')
                addDependency(dependencies, 'org.eclipse.persistence', 'org.eclipse.persistence.asm', '9.1.0')
            }
        }
        jpa(MavenPublication) {
            artifact file("plugins/org.eclipse.persistence.jpa_${artifactVersion}.jar")
            artifactId 'org.eclipse.persistence.jpa'
            artifact source: file("plugins/org.eclipse.persistence.jpa.source_${artifactVersion}.jar"), classifier: 'sources'
            pom.withXml {
                asNode().appendNode('packaging', 'jar')
                def dependencies = asNode().appendNode('dependencies')
                addDependency(dependencies, 'org.eclipse.persistence', 'jakarta.persistence', '2.2.3')
                addDependency(dependencies, 'org.eclipse.persistence', 'org.eclipse.persistence.asm', '9.1.0')
                addDependency(dependencies, 'org.eclipse.persistence', 'org.eclipse.persistence.antlr', originalVersion)
                addDependency(dependencies, 'org.eclipse.persistence', 'org.eclipse.persistence.jpa.jpql', originalVersion)
                addDependency(dependencies, 'org.eclipse.persistence', 'org.eclipse.persistence.core', artifactVersion)
            }
        }
    }
    repositories {
        maven {
            name 'nexus'
            url uploadUrl
            credentials {
                username uploadUser
                password uploadPassword
            }
        }
    }
}

static def addDependency(def dependencies, def groupId, def artifactId, version) {
    def dependency = dependencies.appendNode('dependency')
    dependency.appendNode('groupId', groupId)
    dependency.appendNode('artifactId', artifactId)
    dependency.appendNode('version', version)
    dependency.appendNode('type', 'jar')
    dependency.appendNode('scope', 'compile')
    dependency.appendNode('optional', 'false')
}